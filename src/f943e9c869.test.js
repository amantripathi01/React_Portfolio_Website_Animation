// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4


const reportWebVitals = require('./reportWebVitals');

jest.mock('web-vitals', () => ({
  getCLS: jest.fn(),
  getFID: jest.fn(),
  getFCP: jest.fn(),
  getLCP: jest.fn(),
  getTTFB: jest.fn(),
}));

describe('reportWebVitals', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should call web vitals methods when onPerfEntry is a function', () => {
    const onPerfEntry = jest.fn();
    reportWebVitals(onPerfEntry);

    expect(require('web-vitals').getCLS).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getFID).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getFCP).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getLCP).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getTTFB).toHaveBeenCalledWith(onPerfEntry);
  });

  it('should not call web vitals methods when onPerfEntry is not a function', () => {
    const onPerfEntry = 'not a function';
    reportWebVitals(onPerfEntry);

    expect(require('web-vitals').getCLS).not.toHaveBeenCalled();
    expect(require('web-vitals').getFID).not.toHaveBeenCalled();
    expect(require('web-vitals').getFCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getLCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getTTFB).not.toHaveBeenCalled();
  });
});
